########################################################
snippet time
`!p import time; snip.rv = time.strftime("%Y-%m-%d %H:%M:%S")`
endsnippet

########################################################
snippet date
`!p import time; snip.rv = time.strftime("%Y-%m-%d")`
endsnippet

########################################################
snippet "namespace (\w+)" "namespace-snippet" r
namespace ${1:`!p snip.rv = match.group(1)`}
{

} //namespace $1
endsnippet

########################################################
snippet "GNU License ([\d\w]+)" "Make GNU License" r
// Copyright (C) 2011, 2012  Google Inc.
//
// This file is part of ${1:`!p snip.rv = match.group(1)`}
//
// $1 is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// $1 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with $1.  If not, see <http://www.gnu.org/licenses/>.

endsnippet

########################################################
snippet "def ([\d\w]+)" "Make Cxx Class Method Definitions" r
`!p
import vim, sys
sys.path.append(vim.eval('g:pyclang_dir'))
import gen_methods
class_name = match.group(1)
code, err = gen_methods.gen_methods_definition(vim.current.buffer.name, class_name)
snip.rv = code + err`
endsnippet

# class a {};
# GNU License a

# Golang imports
########################################################
snippet ketty
"github.com/yyzybb537/ketty"
endsnippet

########################################################
snippet gls
"github.com/yyzybb537/gls"
endsnippet

########################################################
snippet option
"github.com/yyzybb537/ketty/option"
endsnippet

########################################################
snippet context
"golang.org/x/net/context"
endsnippet

########################################################
snippet error
"github.com/pkg/errors"
endsnippet

# Golang coding
########################################################
snippet log
ketty.GetLog()
endsnippet

# C plus plus - CMakeLists.txt
########################################################
snippet cmake
cmake_minimum_required(VERSION 2.8)

# Usage by vcpkg (CMAKE_TOOLCHAIN_FILE):
#   mkdir build && cd build && cmake .. -DCMAKE_TOOLCHAIN_FILE=$CMAKE_TOOLCHAIN_FILE
#   mkdir build && cd build && cmake .. -DCMAKE_TOOLCHAIN_FILE="/home/ubuntu/git-third/vcpkg/scripts/buildsystems/vcpkg.cmake"
#   cmake .. -DCMAKE_TOOLCHAIN_FILE=$CMAKE_TOOLCHAIN_FILE
#   cmake .. -DCMAKE_TOOLCHAIN_FILE="/home/ubuntu/git-third/vcpkg/scripts/buildsystems/vcpkg.cmake"

project($1)
set(TARGET ${CMAKE_PROJECT_NAME})

# flags
if (CMAKE_BUILD_TYPE)
else()
    set(CMAKE_BUILD_TYPE RELEASE)
endif()

message("------------ Options -------------")
message("  CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}")
message("  CMAKE_COMMAND: ${CMAKE_COMMAND}")

set(CMAKE_CXX_FLAGS -std=c++11)
set(CMAKE_CXX_FLAGS_DEBUG "-g -pg ${CMAKE_CXX_FLAGS}")
set(CMAKE_CXX_FLAGS_RELEASE "-g -O3 ${CMAKE_CXX_FLAGS}")

message("------------ Cxx flags -------------")
message("  CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE}: ${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE}}")
message("------------------------------------")

# source
aux_source_directory(${PROJECT_SOURCE_DIR} LIST_SRC)
add_executable(${TARGET} ${LIST_SRC})

# include
include_directories(${PROJECT_SOURCE_DIR})

# link
target_link_libraries(${TARGET} "")

# libgo
#find_package(libgo REQUIRED)
find_package(libgo)
if (LIBGO_FOUND)
    include_directories(${LIBGO_INCLUDE_DIRS})
    target_link_libraries(${TARGET} ${LIBGO_LIBRARIES})
endif()

# boost
#find_package(Boost REQUIRED context thread system date_time chrono regex)
find_package(Boost REQUIRED context thread system)
if (Boost_FOUND)
    include_directories(${Boost_INCLUDE_DIRS})
    link_directories(${Boost_LIBRARY_DIRS})
    target_link_libraries(${TARGET} ${Boost_LIBRARIES})
endif()

# target
target_link_libraries(${TARGET} -pthread -ldl -static)
endsnippet

# C plus plus - test code
########################################################
snippet cpptest
#include <iostream>
#include <iomanip>
#include <chrono>
using namespace std;
using namespace std::chrono;

#define OUT(x) cout << #x << " = " << x << endl
#define O(x) cout << x << endl

struct Timer { Timer() : tp(system_clock::now()) {} virtual ~Timer() { auto dur = system_clock::now() - tp; O("Cost " << duration_cast<milliseconds>(dur).count() << " ms"); } system_clock::time_point tp; };
struct Bench : public Timer { Bench() : val(0) {} virtual ~Bench() { auto dur = system_clock::now() - tp; O("Per op: " << duration_cast<nanoseconds>(dur).count() / std::max(val, 1L) << " ns"); auto perf = (double)val / duration_cast<milliseconds>(dur).count() / 10; if (perf < 1) O("Performance: " << std::setprecision(3) << perf << " w/s"); else O("Performance: " << perf << " w/s"); } Bench& operator++() { ++val; return *this; } Bench& operator++(int) { ++val; return *this; } Bench& add(long v) { val += v; } long val; };

int main() {

}
endsnippet
